/*  
    V√≤ng ƒë·ªùi c·ªßa b·ªô nh·ªõ (Memory Life Cycle): Allocate => Use => Release
    - Gi·∫£i ph√≥ng b·ªô nh·ªõ (Garbage Collection): 
      x√≥a b·ªè nh·ªØng gi√° tr·ªã kh√¥ng c√≤n ƒë∆∞·ª£c d√πng n·ªØa
    - C∆° ch·∫ø ph·ªï bi·∫øn: Scavenge, Mark-Sweep, Mark-Compact
*/

/*
    Khi JavaScript engine ph√°t hi·ªán m·ªôt bi·∫øn ho·∫∑c function kh√¥ng c√≤n ƒë∆∞·ª£c tham chi·∫øu 
    (t·ª©c l√† kh√¥ng ai d√πng ƒë·∫øn n·ªØa), n√≥ s·∫Ω t·ª± ƒë·ªông gi·∫£i ph√≥ng v√πng nh·ªõ ƒë√≥.

    C∆° ch·∫ø ho·∫°t ƒë·ªông c∆° b·∫£n c·ªßa Garbage Collector:
    
    1. B∆∞·ªõc "ƒê√°nh d·∫•u" (Mark): 
       - Thu·∫≠t to√°n s·∫Ω duy·ªát qua t·∫•t c·∫£ c√°c gi√° tr·ªã (object, array, function) trong b·ªô nh·ªõ Heap.
       - B·∫Øt ƒë·∫ßu t·ª´ c√°c bi·∫øn g·ªëc (root) nh∆∞ global object, bi·∫øn ƒëang c√≤n s·ªëng trong stack.
       - Duy·ªát theo ki·ªÉu Depth-First Search (DFS), t·∫•t c·∫£ nh·ªØng gi√° tr·ªã c√≤n tham chi·∫øu ƒë∆∞·ª£c s·∫Ω ƒë∆∞·ª£c "ƒë√°nh d·∫•u" l√† c√≤n s·ªëng.

    2. B∆∞·ªõc "D·ªçn d·∫πp" (Sweep): 
       - Sau khi duy·ªát xong, t·∫•t c·∫£ gi√° tr·ªã n√†o KH√îNG ƒë∆∞·ª£c ƒë√°nh d·∫•u 
         ‚Üí coi l√† "ch·∫øt" (unreachable).
       - Nh·ªØng gi√° tr·ªã n√†y s·∫Ω b·ªã gi·∫£i ph√≥ng b·ªô nh·ªõ.

    3. T·ªëi ∆∞u "N√©n b·ªô nh·ªõ" (Compact):
       - Sau khi x√≥a, b·ªô nh·ªõ c√≥ th·ªÉ b·ªã ph√¢n m·∫£nh (nhi·ªÅu kho·∫£ng tr·ªëng nh·ªè r·∫£i r√°c).
       - Thu·∫≠t to√°n Mark-Compact s·∫Ω gom c√°c object "s·ªëng" l·∫°i li·ªÅn k·ªÅ nhau,
         nh·ªù ƒë√≥ b·ªô nh·ªõ g·ªçn g√†ng h∆°n v√† tr√°nh l√£ng ph√≠.

    üöÄ T√≥m g·ªçn:
    - Mark-Sweep: ƒê√°nh d·∫•u v√† x√≥a b·ªè object kh√¥ng d√πng n·ªØa.
    - Mark-Compact: T∆∞∆°ng t·ª± Mark-Sweep, nh∆∞ng c√≥ th√™m b∆∞·ªõc n√©n b·ªô nh·ªõ.
    - Scavenge: (th∆∞·ªùng √°p d·ª•ng cho b·ªô nh·ªõ nh·ªè, t·∫°m th·ªùi) copy object s·ªëng sang v√πng nh·ªõ m·ªõi, 
                v√πng c≈© s·∫Ω b·ªã gi·∫£i ph√≥ng to√†n b·ªô.
*/
